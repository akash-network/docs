.\" Automatically generated by Pandoc 2.7.3
.\"
.TH "pandoc-crossref" "1" "November 2017" "" ""
.hy
.PP
pandoc-crossref is a pandoc filter for numbering figures, equations,
tables and cross-references to them.
.SH Caveats
.SS LaTeX output and \f[C]--include-in-header\f[R]
.PP
pandoc-crossref uses metadata variable \f[C]header-includes\f[R] to add
LaTeX definitions to output.
However, Pandoc\[cq]s command line option
\f[C]--include-in-header\f[R]/\f[C]-H\f[R] overrides this variable.
If you need to use \f[C]--include-in-header\f[R], add
pandoc-crossref-specific definitions as well.
See LaTeX customization for more information.
.SS pandoc-citeproc and pandoc-crossref
.PP
Since pandoc-crossref uses the same citation syntax as pandoc-citeproc,
you \f[I]have\f[R] to run former \f[I]before\f[R] latter.
For example:
.IP
.nf
\f[C]
pandoc -F pandoc-crossref -F pandoc-citeproc file.md -o file.html
\f[R]
.fi
.SS Note on leading/trailing spaces in metadata options
.PP
Leading and trailing spaces in YAML metadata will most likely be
stripped by either YAML parser or Pandoc itself.
If you need leading and/or trailing spaces in pandoc-crossref metadata
variables, use html entity for space instead, i.e.\ \f[C]&#32;\f[R].
For example, if you want reference ranges to be delimited by a dash with
spaces (e.g.\ \f[C]2 - 5\f[R]), include the following in YAML metadata:
.IP
.nf
\f[C]
rangeDelim: \[aq]&#32;-&#32;\[aq]
\f[R]
.fi
.PP
or pass \f[C]-MrangeDelim=\[aq]&#32;-&#32;\[aq]\f[R] to pandoc on
command line.
.PP
You can use other html entites of course, like \f[C]&nbsp;\f[R] etc.
.SH Syntax
.PP
Syntax is loosely based on discussion in
<https://github.com/jgm/pandoc/issues/813>
.SS Image labels
.IP
.nf
\f[C]
![Caption](file.ext){#fig:label}
\f[R]
.fi
.PP
To label an (implicit) figure, append \f[C]{#fig:label}\f[R] (with
\f[C]label\f[R] being something unique to reference this figure by)
immediately after image definition.
.PP
This only works on implicit figures, i.e.\ an image occurring by itself
in a paragraph (which will be rendered as a figure with caption by
pandoc)
.PP
Image block and label \f[I]can not\f[R] be separated by spaces.
.SS Subfigures
.PP
It\[cq]s possible to group figures as subfigures.
Basic syntax is as follows:
.IP
.nf
\f[C]
<div id=\[dq]fig:figureRef\[dq]>
![subfigure 1 caption](image1.png){#fig:figureRefA}

![subfigure 2 caption](image2.png){#fig:figureRefB}

Caption of figure
</div>
\f[R]
.fi
.PP
To sum up, subfigures are made with a div having a figure \f[C]id\f[R].
Contents of said div consist of several paragraphs.
All but last paragraphs contain one subfigure each, with captions,
images and (optionally) reference attributes.
Last paragraph contains figure caption.
.PP
If you put more than one figure in the paragraph, those will still be
rendered, but Pandoc will omit subfigure caption in most outputs (but it
will work as expected with LaTeX).
You can use output-specific hacks to work around that, or use
\f[C]subfigGrid\f[R] (see below).
.PP
Output is customizable, with metadata fields.
See Customization for more information.
.PP
Default settings will produce the following equivalent Markdown from
example above:
.IP
.nf
\f[C]
<div id=\[dq]fig:figureRef\[dq] class=\[dq]subfigures\[dq]>

![a](image1.png){#fig:figureRefA}

![b](image2.png){#fig:figureRefB}

Figure 1: Caption of figure. a \[em] subfigure 1 caption, b \[em] subfigure 2
caption

</div>
\f[R]
.fi
.PP
References to subfigures will be rendered as
\f[C]figureNumber (subfigureNumber)\f[R], e.g., in this particular
example, \f[C][\[at]fig:figureRefA]\f[R] will produce
\f[C]fig. 1 (a)\f[R].
.PP
You can add \f[C]nocaption\f[R] class to an image to suppress subfigure
caption altogether.
Note that it will still be counted.
.SS Subfigure grid
.PP
If you need to align subfigures in a grid, and using output format
styles is not an option, you can use \f[C]subfigGrid\f[R] option.
That will typeset subfigures inside a table.
.PP
Rows are formed by different paragraphs, with each image in a separate
column.
.PP
Column widths will be taken from \f[C]width\f[R] attributes of
corresponding images, e.g.
.IP
.nf
\f[C]
<div id=\[dq]fig:coolFig\[dq]>
![caption a](coolfiga.png){#fig:cfa width=30%}
![caption b](coolfigb.png){#fig:cfb width=60%}
![caption c](coolfigb.png){#fig:cfc width=10%}

![caption d](coolfigd.png){#fig:cfd}
![caption e](coolfige.png){#fig:cfe}
![caption f](coolfigf.png){#fig:cff}

Cool figure!
</div>
\f[R]
.fi
.PP
will produce a table with columns of 30%, 60% and 10% respectively.
.PP
Only first row of images is considered for table width computation,
other rows are completely ignored.
.PP
\f[I]Anything\f[R] except images is silently ignored.
So any text, spaces, soft line breaks etc will silently disappear from
output.
That doesn\[cq]t apply to caption paragraph, obviously.
.PP
All images will have width attribute automatically set to \f[C]100%\f[R]
in order to fill whole column.
.PP
Specifying width in anything but \f[C]%\f[R] will throw an error.
.PP
If width for some images in first row is not specified, those will span
equally in the remaining space.
.PP
If width isn\[cq]t specified for any image in first row, those will span
equally on 99% of page width (due to Pandoc otherwise omitting width
attribute for table).
.PP
This option is ignored with LaTeX output, but paragraph breaks should
produce similar effect, so images should be typeset correctly.
TL;DR you don\[cq]t need \f[C]subfigGrid\f[R] enabled for it to work
with LaTeX, but you can still enable it.
.SS Equation labels
.IP
.nf
\f[C]
$$ math $$ {#eq:label}
\f[R]
.fi
.PP
To label a display equation, append \f[C]{#eq:label}\f[R] (with
\f[C]label\f[R] being something unique to reference this equation by)
immediately after math block.
.PP
Math block and label \f[I]can\f[R] be separated by one or more spaces.
.PP
You can also number all display equations with \f[C]autoEqnLabels\f[R]
metadata setting (see below).
Note, however, that you won\[cq]t be able to reference equations without
explicit labels.
.PP
Equations numbers will be typeset inside math with \f[C]\[rs]qquad\f[R]
before them.
If you want to use tables instead, use \f[C]tableEqns\f[R] option.
Depending on output format, tables might work better or worse than
\f[C]\[rs]qquad\f[R].
.SS Table labels
.IP
.nf
\f[C]
a   b   c
--- --- ---
1   2   3
4   5   6

: Caption {#tbl:label}
\f[R]
.fi
.PP
To label a table, append \f[C]{#tbl:label}\f[R] at the end of table
caption (with \f[C]label\f[R] being something unique to reference this
table by).
Caption and label \f[I]must\f[R] be separated by at least one space.
.SS Section labels
.PP
You can also reference sections of any level.
Section labels use native pandoc syntax, but must start with
\[lq]sec:\[rq], e.g.
.IP
.nf
\f[C]
 Section {#sec:section}
\f[R]
.fi
.PP
You can also use \f[C]autoSectionLabels\f[R] variable to automatically
prepend all section labels (automatically generated with pandoc
included) with \[lq]sec:\[rq].
Bear in mind that references can\[cq]t contain periods, commas etc, so
some auto-generated labels will still be unusable.
.PP
WARNING: With LaTeX output, you have to invoke pandoc with
\f[C]--number-sections\f[R], otherwise section labels won\[cq]t work.
It\[cq]s also advised with other output formats, since with no numbers
in section titles, it would be hard to navigate anyway.
.SS Section numbering
.PP
Pandoc doesn\[cq]t properly support numbering sections in some output
formats, and section reference labels (see below).
.PP
You can let pandoc-crossref handle section numbering instedad.
This is done via \f[C]numberSections\f[R] and \f[C]sectionsDepth\f[R]
metadata options.
.PP
\f[C]numberSections\f[R] controls if pandoc-crossref handles numbering
sections, while \f[C]sectionsDepth\f[R] controls what sections are
numbered.
.PP
Set \f[C]sectionsDepth\f[R] to \f[C]0\f[R] to make section numbering
consistent with \f[C]chaptersDepth\f[R].
.PP
If \f[C]sectionsDepth\f[R] value is lesser than \f[C]0\f[R], all
sections will be numbered.
.PP
Otherwise, only header levels up to and including
\f[C]sectionsDepth\f[R] will be numbered.
.PP
You can also supply a custom section header template via
\f[C]secHeaderTemplate\f[R] metadata option.
The following variables are supported:
.IP \[bu] 2
\f[C]$$i$$\f[R] \[en] formatted section number, according to
\f[C]sectionsDepth\f[R]
.IP \[bu] 2
\f[C]$$t$$\f[R] \[en] original section header text
.IP \[bu] 2
\f[C]$$n$$\f[R] \[en] 0-indexed section level (0 is the topmost)
.PP
See section on templates for more information
.SS Section reference labels
.PP
\f[B]\f[BI]Not currently supported with LaTeX output\f[B]\f[R]
.PP
If you want to reference some section by a pre-defined label instead of
by number, you can specify section attribute \f[C]label\f[R], like this:
.IP
.nf
\f[C]
 Section {label=\[dq]Custom Label\[dq]}
\f[R]
.fi
.PP
This label will be used instead of section number in \f[C]chapters\f[R]
output and when referencing section directly (with
\f[C]\[at]sec:section\f[R]).
.PP
Note that with \f[C]chapters\f[R] output with depth>1, only given
section will be referenced by custom label, e.g.\ with
.IP
.nf
\f[C]
 Chapter 1.

# Section with custom label {#sec:scl label=\[dq]SCL\[dq]}

![](figure.png){#fig:figure}
\f[R]
.fi
.PP
\f[C]\[at]sec:scl\f[R] will translate into \f[C]sec. 1.SCL\f[R], and
\f[C]\[at]fig:figure\f[R] into \f[C]fig. 1.SCL.1\f[R]
.SS Code Block labels
.PP
There are a couple options to add code block labels.
Those work only if code block id starts with \f[C]lst:\f[R],
e.g.\ \f[C]{#lst:label}\f[R]
.SS \f[C]caption\f[R] attribute
.PP
\f[C]caption\f[R] attribute will be treated as code block caption.
If code block has both id and \f[C]caption\f[R] attributes, it will be
treated as numbered code block.
.SS Table-style captions
.PP
Enabled with \f[C]codeBlockCaptions\f[R] metadata option.
If code block is immediately adjacent to paragraph, starting with
\f[C]Listing:\f[R] or \f[C]:\f[R], said paragraph will be treated as
code block caption.
.PP
or
.PP
It also allows to specify label in caption, as do tables, for example:
.SS Wrapping div
.PP
Wrapping code block without label in a div with id \f[C]lst:...\f[R] and
class, starting with \f[C]listing\f[R], and adding paragraph before code
block, but inside div, will treat said paragraph as code block caption.
.SS References
.IP
.nf
\f[C]
[\[at]fig:label1;\[at]fig:label2;...] or [\[at]eq:label1;\[at]eq:label2;...] or [\[at]tbl:label1;\[at]tbl:label2;...] or \[at]fig:label or \[at]eq:label or \[at]tbl:label
\f[R]
.fi
.PP
Reference syntax heavily relies on citation syntax.
Basic reference is created by writing \f[C]\[at]\f[R], then basically
desired label with prefix.
It is also possible to reference a group of objects, by putting them
into brackets with \f[C];\f[R] as separator.
Similar objects will be grouped in order of them appearing in citation
brackets, and sequential reference numbers will be shortened,
e.g.\ \f[C]1,2,3\f[R] will be shortened to \f[C]1-3\f[R].
.PP
You can capitalize first reference character to get capitalized prefix,
e.g.\ \f[C][\[at]Fig:label1]\f[R] will produce \f[C]Fig. ...\f[R] by
default.
Capitalized prefixes are derived automatically by capitalizing first
letter of every word in non-capitalized prefix, unless overridden with
metadata settings.
See Customization for more information.
.SS Linking references
.PP
To make references into hyperlinks to referenced element, enable
\f[C]linkReferences\f[R] metadata option.
This has no effect on LaTeX output, since in this case, hyperlinking
references is handled with \f[C]hyperref\f[R] LaTeX package.
.SS Custom prefix per-reference
.PP
It\[cq]s possible to provide your own prefix per-reference, f.ex.
\f[C][Prefix \[at]reference]\f[R] will replace default prefix
(\f[C]fig.\f[R]/\f[C]sec.\f[R]/etc) with prefix verbatim,
e.g.\ \f[C][Prefix \[at]fig:1]\f[R] will be rendered as
\f[C]Prefix 1\f[R] instead of \f[C]fig. 1\f[R].
.PP
In citation group, citations with the same prefix will be grouped.
So, for example \f[C][A \[at]fig:1; A \[at]fig:2; B \[at]fig:3]\f[R]
will turn into \f[C]A 1, 2, B 3\f[R].
It can be used to an advantage, although it\[cq]s a bit more cumbersome
than it should be, e.g.
\f[C][Appendices \[at]sec:A1; Appendices \[at]sec:A2; Appendices \[at]sec:A3]\f[R]
will turn into \f[C]Appendices \[at]A1-\[at]A3\f[R] (with
\f[C]\[at]A1\f[R] and \f[C]\[at]A3\f[R] being relevant section numbers).
Note that non-contiguous sequences of identical prefixes \f[I]will
not\f[R] be grouped.
.PP
\f[B]\f[BI]Not supported with cleveref LaTeX output.\f[B]\f[R]
.SS Prefix suppression
.PP
Prepending \f[C]-\f[R] before \f[C]\[at]\f[R], like so
\f[C][-\[at]citation]\f[R], will suppress default prefix,
e.g.\ \f[C][-\[at]fig:1]\f[R] will produce just \f[C]1\f[R] (or whatever
number it happens to be) without \f[C]fig.\f[R] prefix.
.PP
In citation group, citations with and without prefixes will be in
different groups.
So \f[C][-\[at]fig:1; \[at]fig:2; -\[at]fig:3]\f[R] will be rendered as
\f[C]1, fig. 2, 3\f[R], so be careful with this feature.
Again, non-contiguous sequences are not grouped together.
.SS Lists
.PP
It\[cq]s possible to use raw latex commands
\f[C]\[rs]listoffigures\f[R], \f[C]\[rs]listoftables\f[R] and
\f[C]listoflistings\f[R], which will produce ordered list of
figure/table/listings titles, in order of appearance in document.
.PP
\f[C]\[rs]listoflistings\f[R] depends on other options, and is defined
in preamble, so it will work reliably only with standalone/pdf output.
.PP
\f[B]NOTE:\f[R] With Pandoc 2.0.6 and up, you\[cq]ll have to explicitly
separate these commands if they are close together, at least when
targeting something besides LaTeX.
So this will not work:
.IP
.nf
\f[C]
\[rs]listoffigures

\[rs]listoftables

\[rs]listoflistings
\f[R]
.fi
.PP
but this will:
.IP
.nf
\f[C]
\[rs]listoffigures
[]: hack to split raw blocks
\[rs]listoftables
[]: hack to split raw blocks
\[rs]listoflistings
\f[R]
.fi
.SH Usage
.PP
Run pandoc with \f[C]--filter\f[R] option, passing path to
pandoc-crossref executable, or simply \f[C]pandoc-crossref\f[R], if
it\[cq]s in PATH:
.PP
\f[C]pandoc --filter pandoc-crossref\f[R]
.PP
If you installed with cabal, it\[cq]s most likely located in
\f[C]$HOME/.cabal/bin\f[R] on *NIX systems,
\f[C]$HOME/Library/Haskell/bin\f[R] on Macs, or in
\f[C]%AppData%\[rs]cabal\[rs]bin\f[R] on Windows.
.SS Customization
.PP
There are several parameters that can be set via YAML metadata (either
by passing \f[C]-M\f[R] to \f[C]pandoc\f[R], or by setting it in source
markdown)
.PP
A list of variables follows.
.SS General options
.IP \[bu] 2
\f[C]cref\f[R]: if True, latex export will use \f[C]\[rs]cref\f[R] from
cleveref package.
Only relevant for LaTeX output.
\f[C]\[rs]usepackage{cleveref}\f[R] will be automatically added to
\f[C]header-includes\f[R].
.IP \[bu] 2
\f[C]chapters\f[R]: if True, number elements as \f[C]chapter.item\f[R],
and restart \f[C]item\f[R] on each first-level heading (as
\f[C]--chapters\f[R] for latex/pdf output)
.IP \[bu] 2
\f[C]chaptersDepth\f[R], default \f[C]1\f[R]: header level to treat as
\[lq]chapter\[rq].
If \f[C]chaptersDepth>1\f[R], then items will be prefixed with several
numbers, corresponding to header numbers, e.g.\ \f[C]fig. 1.4.3\f[R].
.IP \[bu] 2
\f[C]numberSections\f[R], default \f[C]false\f[R]: if True,
pandoc-crossref will prepend section number to section titles (as
counted by pandoc-crossref itself).
.IP \[bu] 2
\f[C]sectionsDepth\f[R], default \f[C]0\f[R]:
.RS 2
.IP \[bu] 2
sectionsDepth < 0 \[en] number all sections
.IP \[bu] 2
sectionsDepth == 0 \[en] be consistent with \f[C]chaptersDepths\f[R]
.IP \[bu] 2
sectionsDepth > 0 \[en] number section levels up to and including
\f[C]sectionsDepth\f[R]
.RE
.IP \[bu] 2
\f[C]listings\f[R]: if True, generate code blocks for \f[C]listings\f[R]
package.
Only relevant for LaTeX output.
\f[C]\[rs]usepackage{listings}\f[R] will be automatically added to
\f[C]header-includes\f[R].
You need to specify \f[C]--listings\f[R] option as well.
.IP \[bu] 2
\f[C]codeBlockCaptions\f[R]: if True, parse table-style code block
captions.
.IP \[bu] 2
\f[C]autoSectionLabels\f[R], default \f[C]false\f[R]: Automatically
prefix all section labels with \f[C]sec:\f[R].
Note that this messes with pandoc\[cq]s automatic header references.
.IP \[bu] 2
\f[C]autoEqnLabels\f[R], default \f[C]false\f[R]: Automatically number
all display equations (i.e.\ ones defined using
\f[C]$$...$$\f[R]/\f[C]\[rs][...\[rs]]\f[R]).
Note that you won\[cq]t be able to reference equations without explicit
labels.
.IP \[bu] 2
\f[C]tableEqns\f[R], default \f[C]false\f[R]: Typeset equations and
equation numbers in tables instead of embedding numbers into equations
themselves.
Depending on output format, this might work better or worse.
.SS Item title format
.IP \[bu] 2
\f[C]figureTitle\f[R], default \f[C]Figure\f[R]: Word(s) to prepend to
figure titles, e.g.\ \f[C]Figure 1: Description\f[R]
.IP \[bu] 2
\f[C]tableTitle\f[R], default \f[C]Table\f[R]: Word(s) to prepend to
table titles, e.g.\ \f[C]Table 1: Description\f[R]
.IP \[bu] 2
\f[C]listingTitle\f[R], default \f[C]Listing\f[R]: Word(s) to prepend to
listing titles, e.g.\ \f[C]Listing 1: Description\f[R]
.IP \[bu] 2
\f[C]titleDelim\f[R], default \f[C]:\f[R]: What to put between object
number and caption text.
.IP \[bu] 2
\f[C]secHeaderDelim\f[R], default \f[C]\f[R] (i.e.\ space): What to put
between section number and title when \f[C]numberSections\f[R] is
\f[C]true\f[R].
.SS Subfigure-specific
.PP
See Subfigures
.IP \[bu] 2
\f[C]ccsDelim\f[R], default \f[C],&nbsp;\f[R]: delimiter for collected
subfigure captions.
See Subfigures and Templates
.IP \[bu] 2
\f[C]ccsLabelSep\f[R], default \f[C]&nbsp;\[em]&nbsp;\f[R]: delimiter
used between subfigure label and subfigure caption in collected
captions.
See Subfigures and Templates
.IP \[bu] 2
\f[C]subfigGrid\f[R], default \f[C]false\f[R].
If true, typeset subfigures inside a table.
Ignored with LaTeX output.
See Subfigures
.SS List titles
.IP \[bu] 2
\f[C]lofTitle\f[R], default \f[C]# List of Figures\f[R]: Title for list
of figures (lof)
.IP \[bu] 2
\f[C]lotTitle\f[R], default \f[C]# List of Tables\f[R]: Title for list
of tables (lot)
.IP \[bu] 2
\f[C]lolTitle\f[R], default \f[C]# List of Listings\f[R]: Title for list
of listings (lol)
.SS Reference format
.IP \[bu] 2
\f[C]figPrefix\f[R], default \f[C]fig.\f[R], \f[C]figs.\f[R]: Prefix for
references to figures, e.g.\ \f[C]figs. 1-3\f[R]
.IP \[bu] 2
\f[C]eqnPrefix\f[R], default \f[C]eq.\f[R], \f[C]eqns.\f[R]: Prefix for
references to equations, e.g.\ \f[C]eqns. 3,4\f[R]
.IP \[bu] 2
\f[C]tblPrefix\f[R], default \f[C]tbl.\f[R], \f[C]tbls.\f[R]: Prefix for
references to tables, e.g.\ \f[C]tbl. 2\f[R]
.IP \[bu] 2
\f[C]lstPrefix\f[R], default \f[C]lst.\f[R], \f[C]lsts.\f[R]: Prefix for
references to lists, e.g.\ \f[C]lsts. 2,5\f[R]
.IP \[bu] 2
\f[C]secPrefix\f[R], default \f[C]sec.\f[R], \f[C]secs.\f[R]: Prefix for
references to sections, e.g.\ \f[C]secs. 2,5\f[R]
.IP \[bu] 2
\f[C]chapDelim\f[R], default \f[C].\f[R]: Delimiter between chapter
number and item number.
.IP \[bu] 2
\f[C]rangeDelim\f[R], default \f[C]-\f[R]: Delimiter between reference
ranges, e.g.
\f[C]eq. 2-5\f[R]
.IP \[bu] 2
\f[C]pairDelim\f[R], default \f[C],\f[R]: Delimiter between pair of
reference ranges, e.g.\ \f[C]eq. 2-5 <and> 7-9\f[R], or
\f[C]eq. 2 <and> 7\f[R], but \f[C]eq. 2, 4, 6\f[R]
.IP \[bu] 2
\f[C]lastDelim\f[R], default \f[C],\f[R]: Delimiter between
second-to-last and last reference ranges,
e.g.\ \f[C]eq. 2-5, 6-8 <and> 10\f[R].
\f[C]pairDelim\f[R] overrides this for cases of exactly two
references/ranges.
.IP \[bu] 2
\f[C]refDelim\f[R], default \f[C],\f[R]: Delimiter between references,
e.g.
\f[C]eq. 2, 5, 7\f[R] or \f[C]eq. 2-4, 6-8\f[R]
.IP \[bu] 2
\f[C]linkReferences\f[R], default \f[C]false\f[R]: Make references
hyperlinks to the referenced element
.IP \[bu] 2
\f[C]nameInLink\f[R], default \f[C]false\f[R]: For single-element
references, inlcude prefix into hyperlink (when using
\f[C]linkReferences\f[R])
.PP
Note that none of the \f[C]*Delim\f[R] options are honored with cleveref
output.
Use cleveref\[cq]s customization options instead.
.PP
\f[C]figPrefix\f[R], \f[C]eqnPrefix\f[R], \f[C]tblPrefix\f[R],
\f[C]lstPrefix\f[R] can be YAML arrays.
That way, value at index corresponds to total number of references in
group, f.ex.
.IP
.nf
\f[C]
figPrefix:
  - \[dq]fig.\[dq]
  - \[dq]figs.\[dq]
\f[R]
.fi
.PP
Will result in all single-value references prefixed with \[lq]fig.\[rq],
and all reference groups of two and more will be prefixed with
\[lq]figs.\[rq]:
.IP
.nf
\f[C]
[\[at]fig:one] -> fig. 1
[\[at]fig:one; \[at]fig:two] -> figs. 1, 2
[\[at]fig:one; \[at]fig:two; \[at]fig:three] -> figs. 1-3
\f[R]
.fi
.PP
They can be YAML strings as well.
In that case, prefix would be the same regardless of number of
references.
.PP
They can also be used with first character capitalized, i.e.
\f[C]FigPrefix\f[R], etc.
In this case, these settings will override default reference
capitailzation settings.
.SS Custom numbering
.PP
See Custom Numbering Schemes
.IP \[bu] 2
\f[C]figLabels\f[R], default unset: custom numbering scheme for figures.
.IP \[bu] 2
\f[C]subfigLabels\f[R], default \f[C]alpha a\f[R]: custom numbering
scheme for subfigures.
.IP \[bu] 2
\f[C]eqnLabels\f[R], default unset: custom numbering scheme for
equations.
.IP \[bu] 2
\f[C]tblLabels\f[R], default unset: custom numbering scheme for tables.
.IP \[bu] 2
\f[C]lstLabels\f[R], default unset: custom numbering scheme for
listings.
.IP \[bu] 2
\f[C]secLabels\f[R], default unset: custom numbering scheme for
sections.
.SS Item title templates
.PP
See Templates
.IP \[bu] 2
\f[C]figureTemplate\f[R], default
\f[C]$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$\f[R]: template for figure
captions
.IP \[bu] 2
\f[C]tableTemplate\f[R], default
\f[C]$$tableTitle$$ $$i$$$$titleDelim$$ $$t$$\f[R]: template for table
captions
.IP \[bu] 2
\f[C]listingTemplate\f[R], default
\f[C]$$listingTitle$$ $$i$$$$titleDelim$$ $$t$$\f[R]: template for
listing captions
.IP \[bu] 2
\f[C]secHeaderTemplate\f[R], default
\f[C]$$i$$$$secHeaderDelim$$$$t$$\f[R]: template for section header text
when \f[C]numberSections\f[R] is \f[C]true\f[R]
.SS Subfigure templates
.PP
See Subfigures
.IP \[bu] 2
\f[C]subfigureTemplate\f[R], default
\f[C]$$figureTitle$$ $$i$$$$titleDelim$$ $$t$$. $$ccs$$\f[R]: template
for subfigure divs captions.
.IP \[bu] 2
\f[C]subfigureChildTemplate\f[R], default \f[C]$$i$$\f[R]: template for
actual subfigure captions.
.IP \[bu] 2
\f[C]ccsTemplate\f[R], default \f[C]$$i$$$$ccsLabelSep$$$$t$$\f[R]:
template for collected subfigure captions.
.SS Reference templates
.PP
See Templates
.IP \[bu] 2
\f[C]figPrefixTemplate\f[R], default \f[C]$$p$$&nbsp;$$i$$\f[R] \[en]
figure reference template
.IP \[bu] 2
\f[C]eqnPrefixTemplate\f[R], default \f[C]$$p$$&nbsp;$$i$$\f[R] \[en]
equation reference template
.IP \[bu] 2
\f[C]tblPrefixTemplate\f[R], default \f[C]$$p$$&nbsp;$$i$$\f[R] \[en]
table reference template
.IP \[bu] 2
\f[C]lstPrefixTemplate\f[R], default \f[C]$$p$$&nbsp;$$i$$\f[R] \[en]
listing reference template
.IP \[bu] 2
\f[C]secPrefixTemplate\f[R], default \f[C]$$p$$&nbsp;$$i$$\f[R] \[en]
section reference template
.IP \[bu] 2
\f[C]refIndexTemplate\f[R], default \f[C]$$i$$$$suf$$\f[R] \[en]
individual reference index template
.IP \[bu] 2
\f[C]subfigureRefIndexTemplate\f[R], default
\f[C]$$i$$$$suf$$ ($$s$$)\f[R] \[en] subfigure reference index template
.SS LaTeX customization
.PP
Support for above variables with LaTeX/PDF output is limited.
In particular, the following variables are honored:
.IP \[bu] 2
\f[C]figureTitle\f[R]
.IP \[bu] 2
\f[C]tableTitle\f[R]
.IP \[bu] 2
\f[C]listingTitle\f[R]
.IP \[bu] 2
\f[C]lofTitle\f[R] \[en] ignores formatting
.IP \[bu] 2
\f[C]lotTitle\f[R] \[en] ignores formatting
.IP \[bu] 2
\f[C]lolTitle\f[R] \[en] ignores formatting
.IP \[bu] 2
\f[C]*Prefix\f[R], upper-/lowercase and single/plural form.
Note that with cleveref output, if \f[C]*Prefix\f[R] is array, only
first two items are used, and the rest is ignored.
.PP
Templates are \f[I]not\f[R] supported.
.PP
You can add arbitrary LaTeX commands to document header, however, using
\f[C]header-includes\f[R] metadata field.
Please bear in mind, that pandoc-crossref up to and including 0.1.2.1
requires \f[C]header-includes\f[R] to be YAML array, e.g.
.IP
.nf
\f[C]
header-includes:
    - \[dq]\[rs]\[rs]newcommand{\[rs]\[rs]pcdoc}{Pandoc-crossref documentation}\[dq]
\f[R]
.fi
.PP
This will be added \f[I]before\f[R] any customization applied by
pandoc-crossref.
For a complete list of what is added to template, consult
ModifyMeta.hs (https://github.com/lierdakil/pandoc-crossref/blob/master/lib/Text/Pandoc/CrossRef/Util/ModifyMeta.hs).
.SS Templates
.PP
pandoc-crossref supports advanced caption customization via caption
templates.
Templates are specified as YAML metadata variables (see Customization),
and are parsed as default Pandoc Markdown.
Variables are specified with display math syntax, i.e.
\f[C]$$var$$\f[R] in a template will be replaced with value of variable
\f[C]var\f[R].
Variables can be specified in YAML metadata block, or from command line
(with \f[C]-M\f[R] switch).
There are two special variables, that are set internally:
.IP \[bu] 2
\f[C]i\f[R] \[en] object number, possibly with chapter number (if
\f[C]chapter=True\f[R])
.IP \[bu] 2
\f[C]t\f[R] \[en] object caption, as given in source Markdown
.PP
Also there is a number of specific variables that are meaningful only in
certain contexts:
.IP \[bu] 2
\f[C]ccs\f[R] \[en] collected subfigure captions.
Only applicable to \f[C]subfigureTemplate\f[R].
Collected captions will be separated by \f[C]ccsDelim\f[R] and
individual captions will be printed with \f[C]ccsTemplate\f[R].
See Subfigures
.IP \[bu] 2
\f[C]suf\f[R] \[en] reference suffix, applicable to
\f[C]refIndexTemplate\f[R], \f[C]subfigureRefIndexTemplate\f[R]
.IP \[bu] 2
\f[C]s\f[R] \[en] subfigure index, applicable to
\f[C]subfigureRefIndexTemplate\f[R]
.PP
\f[C]xPrefixTemplate\f[R], where \f[C]x\f[R] is \f[C]fig\f[R],
\f[C]eqn\f[R], etc, are a special case.
Those don\[cq]t have \f[C]t\f[R] variable, since there is no caption in
source markdown, but instead have \f[C]p\f[R] variable, that binds to
relevant \f[C]xPrefix\f[R].
This is done this way, since actual prefix vaule can depend on
\f[C]i\f[R].
.PP
Additionally, a special syntax is provided for indexed access to array
metadata variables: \f[C]arrayVariable[indexVariable]\f[R], where
\f[C]arrayVariable\f[R] is an array-like metadata variable, and
\f[C]indexVariable\f[R] is an integer-typed template variable.
If \f[C]indexVariable\f[R] is larger than length of
\f[C]arrayVariable\f[R], then the last element in
\f[C]arrayVariable\f[R] is used.
.PP
Indexed access can be useful with \f[C]secHeaderTemplate\f[R] for
example, where you might want to add a custom prefix depending on the
header level.
.PP
For example, with this YAML metadata:
.IP
.nf
\f[C]
secHeaderTemplate: $$secHeaderPrefix[n]$$$$i$$. $$t$$
secHeaderPrefix:
  - \[dq]Chapter&#32;\[dq]
  - \[dq]Section&#32;\[dq]
  - \[dq]\[dq]
sectionsDepth: -1
numberSections: true
\f[R]
.fi
.PP
top-level sections will be prefixed with \f[C]Chapter\f[R], second-level
sections will be prefixed with \f[C]Section\f[R] and the rest won\[cq]t
be prefixed with anything.
.PP
Please note that at the moment, templates are not supported with
LaTeX/PDF output.
.SS Custom Numbering Schemes
.PP
It\[cq]s possible to use other numbering schemes apart from arabic.
This is controlled by several metadata options, consult Customization
for a list.
Possible values are:
.IP \[bu] 2
\f[C]arabic\f[R] \[en] arabic numbers (1, 2, 3 \&...)
.IP \[bu] 2
\f[C]roman\f[R] \[en] roman numbers (I, II, III, IV, \&...)
.IP \[bu] 2
\f[C]alpha x\f[R], where \f[C]x\f[R] is first letter to start from.
This will work for any letter, but will use UTF-8 codepage to determine
what\[cq]s next, so using something strange is not advised.
For example, you can safely use \f[C]alpha a\f[R] to get lowercase latin
letters for 26 figures.
After that, it will get weird (since basic latin alphabet has 26
letters).
Specifically, it will go into characters space (\f[C]{\f[R],
\f[C]|\f[R], \f[C]}\f[R], etc).
You can consult
http://www.fileformat.info/info/unicode/block/basic_latin/utf8test.htm
for general idea on letter progression.
.IP \[bu] 2
list of strings.
You can define a YAML array for numbers.
Mapping is 1:1.
For example, \f[C]figLabels: [\[*a], \[*b], \[*g], \[*d], \[*e]]\f[R]
will give first object label `\[*a]', second \[en] `\[*b]', etc, up
until the fifths.
.RS 2
.PP
Note that it will repeat last item in list indefinitely if there are
more references than items in list, i.e.\ in the example above, sixths
object and all after that will also have label `\[*e]'.
.RE
.SS Settings file
.PP
It is also possible to set variables used by pandoc-crossref with a
separate YAML file.
If a given variable is not set in metadata, then pandoc-crossref will
attempt to read it from file specified by \f[C]crossrefYaml\f[R]
metadata variable, or, if not set, from \f[C]pandoc-crossref.yaml\f[R]
from current working directory.
This allows for reusable configurations.
One possible application is ad-hoc internationalization.
.PP
For example, consider \f[C]$HOME/misc/pandoc-crossref-es.yaml\f[R]:
.IP
.nf
\f[C]
figureTitle: \[dq]Figura\[dq]
tableTitle: \[dq]Tabla\[dq]
figPrefix: \[dq]fig.\[dq]
eqnPrefix: \[dq]ec.\[dq]
tblPrefix: \[dq]tbl.\[dq]
loftitle: \[dq]# Lista de figuras\[dq]
lotTitle: \[dq]# Lista de tablas\[dq]
\f[R]
.fi
.PP
pandoc-crossref will send this data to pandoc wrapped in lines of
\f[C]---\f[R].
The YAML file\[cq]s first line should specify a variable; it will not
pass the variables if it is \f[C]---\f[R] or a blank line.
.PP
One could use this with pandoc-crossref as follows:
.PP
\f[C]pandoc -F pandoc-crossref.hs -M \[dq]crossrefYaml=$HOME/misc/pandoc-crossref-es.yaml\[dq]\f[R]
.PP
You can also use global configuration files, which are expected in
\f[C]$HOME/.pandoc-crossref/config.yaml\f[R] and
\f[C]$HOME/.pandoc-crossref/config-$FORMAT.yaml\f[R], where
\f[C]$FORMAT\f[R] is output format, f.ex.
\f[C]latex\f[R] or \f[C]epub\f[R].
On Windows, \f[C]$HOME\f[R] in general resolves to user\[cq]s root
directory, e.g.\ \f[C]C:\[rs]Users\[rs]username\[rs]\f[R].
.PP
Priorities are as follows (from highest to lowest):
.IP \[bu] 2
document metadata
.IP \[bu] 2
\f[C]crossrefYaml\f[R]/\f[C]$CWD/pandoc-crossref.yaml\f[R]
.IP \[bu] 2
\f[C]$HOME/.pandoc-crossref/config-$FORMAT.yaml\f[R]
.IP \[bu] 2
\f[C]$HOME/.pandoc-crossref/config.yaml\f[R]
.SH License
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.
.SH AUTHORS
Nikolay Yakimov.
